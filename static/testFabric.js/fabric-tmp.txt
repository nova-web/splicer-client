(function() { var canvas = this.__canvas = new fabric.Canvas('c'); fabric.Object.prototype.transparentCorners = false; fabric.Object.prototype.originX = fabric.Object.prototype.originY = 'center'; fabric.Canvas.prototype.getAbsoluteCoords = function(object) { return { left: object.left + this._offset.left, top: object.top + this._offset.top }; } var btn = document.getElementById('inline-btn'), btnWidth = 85, btnHeight = 18; function positionBtn(obj) { var absCoords = canvas.getAbsoluteCoords(obj); btn.style.left = (absCoords.left - btnWidth / 2) + 'px'; btn.style.top = (absCoords.top - btnHeight / 2) + 'px'; } fabric.Image.fromURL('../lib/pug.jpg', function(img) { canvas.add(img.set({ left: 250, top: 250, angle: 30 }).scale(0.25)); img.on('moving', function() { positionBtn(img) }); img.on('scaling', function() { positionBtn(img) }); positionBtn(img); }); })();


<!-- <script src="./static/js/fabric.canvasex.js"></script> -->
<!DOCTYPE html>
<html>
<head>
    <title>fabric.CanvasEx Events Demo</title>
    <script src="../scripts/jquery.js"></script>
    <script src="../scripts/fabric.js"></script>
    <script src="../scripts/fabric.canvasex.js"></script>
</head>
<body>
    <div style="float:left;">
        <button id="drawMode" style="margin-top:30px;">Drawing Mode</button>
        <button id="controlMode" style="margin-top:30px;">Control Mode</button>
        <button id="fireEventForObjectInsideGroup" style="margin-top:30px;">Fire event for object inside group</button>
        <canvas id="c" width="600" height="400"></canvas>
    </div>
    <textarea id="eventInspector" style="float:left; margin-left:10px; width: 300px; height:600px; overflow:scroll;">

    </textarea>

    <script>
        $(document).ready(function () {
            // Preparing
            var canvas = new fabric.CanvasEx('c');
            $('#controlMode').on('click', function () {
                canvas.isDrawingMode = false;
            });
            $('#drawMode').on('click', function () {
                canvas.isDrawingMode = true;
            });
            $('#fireEventForObjectInsideGroup').on('click', function () {
                // Object inside a group will recieve event as well.
                canvas.fireEventForObjectInsideGroup = true;
            });
            var rect = new fabric.Rect({
                left: 100,
                top: 100,
                fill: 'red',
                width: 300,
                height: 300
            });
            canvas.add(rect);
            var anotherRect = new fabric.Rect({
                left: 110,
                top: 110,
                fill: 'blue',
                width: 100,
                height: 100
            });
            canvas.add(anotherRect);
            // Events binding demo.
            // Double click demo.
            rect.on('object:dblclick', function (options) {
                writeToEventInspector('object:dblclick');
            });
            canvas.on('mouse:dblclick', function (options) {
                writeToEventInspector('mouse:dblclick');
            });
            // Right click demo.
            rect.on('mousedown', function (options) {
                writeToEventInspector('rect mousedown');
                if (options.e.which === 3) {
                    console.log('Object right mouse down.');
                }
            });
            canvas.on('mouse:down', function (options) {
                writeToEventInspector('canvas mousedown');
                if (options.e.which === 3) {
                    console.log('Canvas right mouse down.');
                }
            });
        });
        var writeToEventInspector = function (text) {
            var existingText = $('#eventInspector').text();
            var newText = existingText + '\r\n' + text;
            $('#eventInspector').text(newText);
        }
    </script>
</body>
</html>




---------------------------------------------------------------------------
class LabeledRect {
          constructor(label) {
            this.width = 100;
            this.height = 50;
            this.left = 100;
            this.top = 200;
            this.label = label;
          }

          toString() {
            return [
              new fabric.Circle({
                radius: 100,
                fill: '#eef',
                scaleY: 0.5,
                originX: 'center',
                originY: 'center'
              }),

              new fabric.Text(this.label, {
                fontSize: 30,
                originX: 'center',
                originY: 'center'
              })
            ];
          }
        }

        console.log(new LabeledRect('aaas'));

        var group = new fabric.Group(new LabeledRect('aaas').toString(), {
          left: 150,
          top: 100,
          fontSize: 10
        });

        canvas.add(group);